# -*- coding: utf-8 -*-
"""lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FHlw3X8RxcmbSucLCbQxRN4m8kdNybjs
"""

import matplotlib.pyplot as plt
import random


AVERAGE_PRICE = 600
PRICE_THRESHOLD = 0.8  # 20% discount
MIN_STOCK_LEVEL = 10
ORDER_QUANTITY = 15
MIN_ORDER = 10  # Minimum order when stock is critical


class TradingAgent:
    def __init__(self):
        self.stock = 30
        self.total_orders = 0
        self.price = AVERAGE_PRICE  # Starting price

    def update_price(self):
        # Simulate price fluctuations (random drop or increase)
        price_change = random.uniform(-0.1, 0.1)
        self.price = max(100, self.price * (1 + price_change))  # Ensure price never goes below 100 BDT

    def decide_order(self):

        if self.price <= AVERAGE_PRICE * PRICE_THRESHOLD and self.stock >= MIN_STOCK_LEVEL:
            tobuy = ORDER_QUANTITY

        elif self.stock < MIN_STOCK_LEVEL:
            tobuy = MIN_ORDER
        else:
            tobuy = 0

        self.stock += tobuy
        self.total_orders += tobuy
        return tobuy

    def simulate_day(self):

        self.update_price()
        tobuy = self.decide_order()
        return tobuy, self.stock, self.price


# Simulation
def simulate_trading(agent, days=30):
    order_history = []
    stock_history = []
    price_history = []

    for day in range(1, days + 1):
        tobuy, stock, price = agent.simulate_day()
        order_history.append(tobuy)
        stock_history.append(stock)
        price_history.append(price)

    return order_history, stock_history, price_history


# Run the simulation
agent = TradingAgent()
orders, stocks, prices = simulate_trading(agent, days=30)

# Plotting results
def plot_results(orders, stocks, prices):
    fig, ax1 = plt.subplots(figsize=(10, 6))

    ax1.set_xlabel('Days')
    ax1.set_ylabel('Stock Level', color='tab:blue')
    ax1.plot(stocks, color='tab:blue', label='Stock Level')
    ax1.tick_params(axis='y', labelcolor='tab:blue')

    ax2 = ax1.twinx()
    ax2.set_ylabel('Price (BDT)', color='tab:red')
    ax2.plot(prices, color='tab:red', label='Price', linestyle='--')
    ax2.tick_params(axis='y', labelcolor='tab:red')

    fig.tight_layout()
    plt.title('Smartphone Inventory Management')
    plt.show()

# Plotting the results
plot_results(orders, stocks, prices)